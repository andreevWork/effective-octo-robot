
==================== FINAL INTERFACE ====================
2017-10-30 12:05:54.622655 UTC

interface effective-octo-robot-0.1.0.0-KcrcswkT73U2JfS8YKFcKm:Compose.Compose 8002
  interface hash: 60fd2faf0b743192c5df87747c0ee04a
  ABI hash: eb88018a41449fe5d7e7d7cd607077f5
  export-list hash: 292f6e90c142c71073d01acf21f65751
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 90d1d43f3351b93545729cd7aa4526a6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Compose.Compose.compose2
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
605eb1c93404550693e7844fa6a782cb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Compose.Compose.$trModule2
                   Compose.Compose.$trModule1) -}
7ac3ffcc85980c902262f530761ea9ae
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Compose.Compose"#) -}
c1666d70a85d386f3a792c3410ddabaf
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "effective-octo-robot-0.1.0.0-KcrcswkT73U2JfS8YKFcKm"#) -}
d1420f6da058f2695481f327d97e9aee
  compose2 :: (c -> d) -> (a -> b -> c) -> a -> b -> d
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ d
                   @ a
                   @ b
                   (f :: c -> d)
                   (g :: a -> b -> c)
                   (x :: a)
                   (y :: b) ->
                 f (g x y)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

